/**
 * The canonical "Hello, World" demo class expressed in X10
 */
import x10.lang.Char;
import x10.lang.Int;
import x10.io.File;
//import x10.util.StringUtil;
import x10.lang.String;
public class Hello {

    /**
     * The main method for the Hello class
     */
	public static def asccii(c:Char):Long{
		if(c=='a'){
			return 1;
		}
		if(c=='b'){
			return asccii("a".charAt(Int.operator_as(0)))+1;
		}
		if(c=='c'){
			return asccii("b".charAt(Int.operator_as(0)))+1;
		}
		if(c=='d'){
			return asccii("c".charAt(Int.operator_as(0)))+1;
		}
		if(c=='e'){
			return asccii("d".charAt(Int.operator_as(0)))+1;
		}
		if(c=='f'){
			return asccii("e".charAt(Int.operator_as(0)))+1;
		}
		if(c=='g'){
			return asccii("f".charAt(Int.operator_as(0)))+1;
		}
		if(c=='h'){
			return asccii("g".charAt(Int.operator_as(0)))+1;
		}
		if(c=='i'){
			return asccii("h".charAt(Int.operator_as(0)))+1;
		}
		if(c=='j'){
			return asccii("i".charAt(Int.operator_as(0)))+1;
		}
		if(c=='k'){
			return asccii("j".charAt(Int.operator_as(0)))+1;
		}
		if(c=='l'){
			return asccii("k".charAt(Int.operator_as(0)))+1;
		}
		if(c=='m'){
			return asccii("l".charAt(Int.operator_as(0)))+1;
		}
		if(c=='n'){
			return asccii("m".charAt(Int.operator_as(0)))+1;
		}
		if(c=='ñ'){
			return asccii("n".charAt(Int.operator_as(0)))+1;
		}
		
		if(c=='o'){
			return asccii("ñ".charAt(Int.operator_as(0)))+1;
		}
		if(c=='p'){
			return asccii("o".charAt(Int.operator_as(0)))+1;
		}
		if(c=='q'){
			return asccii("p".charAt(Int.operator_as(0)))+1;
		}
		if(c=='r'){
			return asccii("q".charAt(Int.operator_as(0)))+1;
		}
		if(c=='s'){
			return asccii("r".charAt(Int.operator_as(0)))+1;
		}
		if(c=='t'){
			return asccii("s".charAt(Int.operator_as(0)))+1;
		}
		if(c=='v'){
			return asccii("t".charAt(Int.operator_as(0)))+1;
		}
		if(c=='w'){
			return asccii("v".charAt(Int.operator_as(0)))+1;
		}
		if(c=='x'){
			return asccii("w".charAt(Int.operator_as(0)))+1;
		}
		if(c=='y'){
			return asccii("x".charAt(Int.operator_as(0)))+1;
		}
		if(c=='z'){
			return asccii("y".charAt(Int.operator_as(0)))+1;
		}
		
		return 0;
	}
	public static def encri(c:Char):Char{
		if(c=='a'){
			return 'e';
		}
		if(c=='b'){
			return 'f';
		}
		if(c=='c'){
			return 'g';
		}
		
		if(c=='d'){
			return 'h';
		}
		if(c=='e'){
			return 'i';
		}
		
		if(c=='f'){
			return 'j';
		}
		if(c=='g'){
			return 'k';
		}
		
		if(c=='h'){
			return 'l';
		}
		if(c=='i'){
			return 'm';
		}
		if(c=='j'){
			return 'n';
		}
		
		if(c=='k'){
			return 'ñ';
		}
		if(c=='l'){
			return 'o';
		}
		if(c=='m'){
			return 'p';
		}
		
		if(c=='n'){
			return 'q';
		}
		if(c=='ñ'){
			return 'r';
		}
		if(c=='o'){
			return 's';
		}
		
		if(c=='p'){
			return 't';
		}
		if(c=='q'){
			return 'u';
		}
		if(c=='r'){
			return 'v';
		}
		
		if(c=='s'){
			return 'w';
		}
		if(c=='t'){
			return 'x';
		}
		if(c=='u'){
			return 'y';
		}
		if(c=='v'){
			return 'z';
		}
		
		if(c=='w'){
			return 'a';
		}
		if(c=='x'){
			return 'b';
		}
		if(c=='y'){
			return 'c';
		}	
		if(c=='z'){
			return 'd';
		}
		
		
		if(c=='0'){
			return '5';
		}
		
		if(c=='1'){
			return '6';
		}
		
		if(c=='2'){
			return '7';
		}
		
		if(c=='3'){
			return '8';
		}
		
		if(c=='4'){
			return '9';
		}
		
		if(c=='5'){
			return '0';
		}
		
		if(c=='6'){
			return '1';
		}
		
		if(c=='7'){
			return '2';
		}
		
		if(c=='8'){
			return '3';
		}
		
		if(c=='9'){
			return '4';
		}
		
		
		
		
		
		
		return c;
	}
	public static def desencri(c:Char):Char{
		if(c=='a'){
			return 'w';
		}
		if(c=='b'){
			return 'x';
		}
		if(c=='c'){
			return 'y';
		}
		
		if(c=='d'){
			return 'z';
		}
		if(c=='e'){
			return 'a';
		}
		
		if(c=='f'){
			return 'b';
		}
		if(c=='g'){
			return 'c';
		}
		
		if(c=='h'){
			return 'd';
		}
		if(c=='i'){
			return 'e';
		}
		if(c=='j'){
			return 'f';
		}
		
		if(c=='k'){
			return 'g';
		}
		if(c=='l'){
			return 'h';
		}
		if(c=='m'){
			return 'i';
		}
		
		if(c=='n'){
			return 'j';
		}
		if(c=='ñ'){
			return 'k';
		}
		if(c=='o'){
			return 'l';
		}
		
		if(c=='p'){
			return 'm';
		}
		if(c=='q'){
			return 'n';
		}
		if(c=='r'){
			return 'ñ';
		}
		
		if(c=='s'){
			return 'o';
		}
		if(c=='t'){
			return 'p';
		}
		if(c=='u'){
			return 'q';
		}
		if(c=='v'){
			return 'r';
		}
		
		if(c=='w'){
			return 's';
		}
		if(c=='x'){
			return 't';
		}
		if(c=='y'){
			return 'u';
		}
		if(c=='z'){
			return 'v';
		}
		
		if(c=='0'){
			return '5';
		}
		
		if(c=='1'){
			return '6';
		}
		
		if(c=='2'){
			return '7';
		}
		
		if(c=='3'){
			return '8';
		}
		
		if(c=='4'){
			return '9';
		}
		
		if(c=='5'){
			return '0';
		}
		
		if(c=='6'){
			return '1';
		}
		
		if(c=='7'){
			return '2';
		}
		
		if(c=='8'){
			return '3';
		}
		
		if(c=='9'){
			return '4';
		}
		
		return c;
	}

	public static def encriptar(s:String):String{
		var pal:String="";
		for (var i:Int=Int.operator_as(0);i<s.length();i++){
			
			pal=pal+encri(s.charAt(i));
		}
		return pal;
	} 
	public static def desencriptar(s:String):String{
		var pal:String="";
		Console.OUT.println("lol2");
		for (var i:Int=Int.operator_as(0);i<s.length();i++){
			pal=pal+desencri(s.charAt(i));
			//Console.OUT.println("lol");
		}
		Console.OUT.println("lol");
		return pal;
	}
	
    public static def main(Rail[String]) {
    	var pal:String="lol";
        Console.OUT.printf("%s",asccii(pal.charAt(2n))+" ");
        //var j:Int;
        //j=Int.operator_as(0);
        Console.OUT.println(desencriptar(encriptar("humanos")));
        var total:Long=200;
        var total2:Long=0;
        val rast=new Rail[String](total);
        
        val arc = new File("c:\\Users\\GERALD\\Desktop\\examen\\original.txt");//Escritura en un archivo
        //val escribir = arc.printer();
        val lines = arc.lines();
        while(lines.hasNext()) {
        	rast(total2)=encriptar(lines.next());
        	//Console.OUT.println(rast(total2));
        	total2++;
        }
        Console.OUT.println(total2);
        
        val salida = new File("c:\\Users\\GERALD\\Desktop\\examen\\salida.txt");//Escritura en un archivo
        val escribir = salida.printer();
        val rast2=new Rail[String](total2+1);
        for (var j:Long=0; j<total2;j++) {
        	var rast3: String;
        	rast3=encriptar(rast(j));
        	rast3=encriptar(rast3);
        	Console.OUT.println(rast3);
        	//escribir.println(encriptar(rast(j)));
        }
        //escribir.flush();
        
        
        
    }

}